        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:2
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:#include <iostream>
        -:    4:
        -:    5:using std::string;
        -:    6:
        -:    7:/*
        -:    8:  The function receives a string counts how many times the same character
        -:    9:  occurs at the beginning of the string, before any other characters (or the
        -:   10:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   11:  'z' and any ASCII characters are allowed.
        -:   12:*/
       14:   13:int Password::count_leading_characters(string phrase) {
       14:   14:    int repetition = 1;
       14:   15:    int index = 0;
       18:   16:    while (index < phrase.length() - 1 && phrase[index] == phrase[index + 1]) {
        4:   17:        repetition++;
        4:   18:        index++;
        -:   19:    }
       14:   20:    return repetition;
        -:   21:}
        -:   22:
        -:   23:#include <cctype>
       21:   24:bool Password::has_mixed_case(string str)
        -:   25:{
       21:   26:    bool has_lower = false;
       21:   27:    bool has_upper = false;
      177:   28:    for (char ch : str)
        -:   29:    {
      156:   30:        if (std::islower(ch))
        -:   31:        {
      126:   32:            has_lower = true;
        -:   33:        }
       30:   34:        else if (std::isupper(ch))
        -:   35:        {
       12:   36:            has_upper = true;
        -:   37:        }
        -:   38:    }
       21:   39:    return has_lower && has_upper;
        -:   40:}
        -:   41:
       31:   42:Password::Password() {
       31:   43:    pass_history.push_back("ChicoCA-95929");
       31:   44:}
        -:   45:
       13:   46:void Password::set(string pw) {
       13:   47:    int chars = pw.length();
       13:   48:    bool mixed_case = has_mixed_case(pw);
       13:   49:    bool previously_used = false;
       28:   50:    for (int i = 0; i < pass_history.size(); i++) {
       17:   51:        if (pass_history[i] == pw) {
        2:   52:            previously_used = true;
        2:   53:            break;
        -:   54:        }
        -:   55:    }
        -:   56:
       13:   57:    if (chars <= 20 && chars >= 8) {
       11:   58:        if (mixed_case == true) {
        8:   59:            if (previously_used == false) {
        6:   60:                pass_history.push_back(pw);
        -:   61:            }
        -:   62:        }
        -:   63:    }
       13:   64:}
        -:   65:
        9:   66:bool Password::authenticate(string pw) {
        9:   67:    if (pass_history.back() == pw) {
        2:   68:        return true;
        -:   69:    }
        7:   70:    return false;
        -:   71:}
